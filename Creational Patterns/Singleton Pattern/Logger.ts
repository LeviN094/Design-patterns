// ‚úÖ V√≠ d·ª• 2: Logger Singleton trong TypeScript
// üéØ Ghi log ra console ‚Äî t·∫•t c·∫£ module trong h·ªá th·ªëng ƒë·ªÅu x√†i chung 1 logger.

// Logger.ts
export class Logger {
  //   Khai b√°o m·ªôt bi·∫øn tƒ©nh (static) t√™n l√† instance d√πng ƒë·ªÉ gi·ªØ l·∫°i logger duy nh·∫•t.
  // static nghƒ©a l√† bi·∫øn n√†y g·∫Øn v·ªõi class, kh√¥ng thu·ªôc v·ªÅ instance n√†o.

  private static instance: Logger;

  // static: V√¨ ta c·∫ßn m·ªôt bi·∫øn d√πng chung cho t·∫•t c·∫£, kh√¥ng ph·ª• thu·ªôc v√†o instance n√†o.
  // ==> N·∫øu ko static instance s·∫Ω thu·ªôc v·ªÅ t·ª´ng ƒë·ªëi t∆∞·ª£ng ‚Äî m·ªói l·∫ßn t·∫°o new Logger() s·∫Ω c√≥ bi·∫øn ri√™ng ‚Üí kh√¥ng th·ªÉ ki·ªÉm so√°t Singleton.
  // private: ƒê·ªÉ b·∫£o v·ªá bi·∫øn n√†y, kh√¥ng cho b√™n ngo√†i s·ª≠a Logger.instance tr·ª±c ti·∫øp.


  // ----------------------------------------
  private constructor() {} // ch·∫∑n new tr·ª±c ti·∫øp

  // Khi constructor l√† private, b·∫°n kh√¥ng th·ªÉ d√πng new Logger() ·ªü b√™n ngo√†i class.
  // ƒê√¢y l√† k·ªπ thu·∫≠t then ch·ªët c·ªßa Singleton: ch·∫∑n vi·ªác t·ª± √Ω t·∫°o nhi·ªÅu instance.
  // const log = new Logger(); // ‚ùå L·ªói: Constructor of class 'Logger' is private

  // ----------------------------------------
  static getInstance(): Logger {
    if (!Logger.instance) {
      Logger.instance = new Logger();
    }
    return Logger.instance;
  }

  log(message: string): void {
    console.log(`[LOG] ${message}`);
  }
}


// index.ts
import { Logger } from "./Logger";

const logger1 = Logger.getInstance();
const logger2 = Logger.getInstance();

logger1.log("App started");
logger2.log("User logged in");

console.log(logger1 === logger2); // true
