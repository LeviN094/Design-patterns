// ‚úÖ 1. ƒê·ªãnh nghƒ©a c√°c h√†m chi·∫øn l∆∞·ª£c

const preorderPrice = (price: number) => price * 0.9;
const promotionPrice = (price: number) => price * 0.85;
const blackFriday = (price: number) => price * 0.5;
const dayPrice = (price: number) => price - 10;
const defaultPrice = (price: number) => price;
// ‚úÖ 2. ƒê·ªãnh nghƒ©a lo·∫°i promotion d√πng type

type PromotionType = 'preorder' | 'promotion' | 'blackFriday' | 'dayPrice' | 'default';
// ‚úÖ 3. Object ch·ª©a c√°c chi·∫øn l∆∞·ª£c v·ªõi ki·ªÉu r√µ r√†ng

const getPriceStrategies: Record<PromotionType, (price: number) => number> = {
  preorder: preorderPrice,
  promotion: promotionPrice,
  blackFriday: blackFriday,
  dayPrice: dayPrice,
  default: defaultPrice,
};

// üîê G·ª£i √Ω: N·∫øu b·∫°n mu·ªën √©p bu·ªôc ch·ªâ d√πng PromotionType h·ª£p l·ªá, b·∫°n c√≥ th·ªÉ ch·ªânh nh∆∞ sau:

function getPriceSafe(price: number, typePromotion: PromotionType): number {
  return getPriceStrategies[typePromotion](price);
}
// D√πng nh∆∞ v·∫ßy s·∫Ω an to√†n h∆°n v√¨ truy·ªÅn sai s·∫Ω b√°o l·ªói ngay t·ª´ l√∫c compile:


console.log(getPriceSafe(200, 'blackFriday')); // ‚úÖ OK
// console.log(getPriceSafe(200, 'summerSale')); ‚ùå L·ªói compile



// ‚úÖ 5. K·∫øt qu·∫£ test

console.log(getPrice(200, 'dayPrice'));      // 190
console.log(getPrice(200, 'blackFriday'));   // 100
console.log(getPrice(200, 'notFoundType'));  // fallback: 200